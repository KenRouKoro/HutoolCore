plugins {
    id 'java'
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

group 'cn.korostudio.mc'
version '1.2.0'

ext {
    appVersion = version
    hutool_version = '5.8.16'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://jitpack.io' }
}


dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation "cn.hutool:hutool-all:${hutool_version}"
    implementation "com.google.zxing:core:3.3.3"
    implementation 'com.github.KenRouKoro:ctoml4j:1.0.1'
}

tasks.register('buildAll') {
    group = 'full stack build'
    build
    dependsOn ':HutoolCoreInCommon:build'
    dependsOn ':HutoolCoreInPaper:build'
    dependsOn ':HutoolCoreInFabric:build'
    dependsOn ':HutoolCoreInForge:build'
    dependsOn ':HutoolCoreInIgnite:build'
}

tasks.register('buildAllJar'){
    group = 'full stack build'
    buildAll
    dependsOn ':HutoolCoreInFabric:remapJar'
}

tasks.register('buildMainJar'){
    group = 'full stack build'
    dependsOn ':HutoolCoreInFabric:remapJar'
}

test {
    useJUnitPlatform()
}

import java.nio.file.Files
import java.nio.file.Paths

tasks.register('mergeManifests') {
    doFirst {
        // 清空 external 目录
        delete "$buildDir/external"
    }
    doLast {
        def paperManifest = "$buildDir/external/Paper/META-INF/MANIFEST.MF"
        def forgeManifest = "$buildDir/external/Forge/META-INF/MANIFEST.MF"
        def fabricManifest = "$buildDir/external/Fabric/META-INF/MANIFEST.MF"
        def igniteManifest = "$buildDir/external/Ignite/META-INF/MANIFEST.MF"
        def commonManifest = "$buildDir/external/Common/META-INF/MANIFEST.MF"
        def mergedManifest = "$buildDir/external/META-INF/MANIFEST.MF"

        copy {
            from(zipTree("HutoolCoreInPaper/build/libs/HutoolCoreInPaper-${version}.jar")) {
                include 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external/Paper")
        }
        copy {
            from(zipTree("HutoolCoreInForge/build/libs/HutoolCoreInForge-${version}.jar")) {
                include 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external/Forge")
        }
        copy {
            from(zipTree("HutoolCoreInFabric/build/libs/HutoolCoreInFabric-${version}.jar")) {
                include 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external/Fabric")
        }
        copy {
            from(zipTree("HutoolCoreInIgnite/build/libs/HutoolCoreInIgnite-${version}.jar")) {
                include 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external/Ignite")
        }
        copy {
            from(zipTree("HutoolCoreCommon/build/libs/HutoolCoreCommon-${version}.jar")) {
                include 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external/Common")
        }

        // 读取所有 MANIFEST.MF 文件的内容
        def paperLines = Files.readAllLines(Paths.get(paperManifest))
        def forgeLines = Files.readAllLines(Paths.get(forgeManifest))
        def igniteLines = Files.readAllLines(Paths.get(igniteManifest))
        def fabricLines = Files.readAllLines(Paths.get(fabricManifest))
        def commonLines = Files.readAllLines(Paths.get(commonManifest))

        // 合并多个 MANIFEST.MF 文件的内容，去掉重复行并在合适的地方换行
        def manifestContent = new LinkedHashSet<>()
        manifestContent.addAll(paperLines)
        manifestContent.addAll(forgeLines)
        manifestContent.addAll(fabricLines)
        manifestContent.addAll(igniteLines)
        manifestContent.addAll(commonLines)

        // 将合并后的内容写入新的 MANIFEST.MF 文件，并在文件末尾添加换行符
        Files.createDirectories(Paths.get("$buildDir/external/META-INF"))
        def manifestContentWithoutEmptyLines = manifestContent.findAll { it != "" }
        Files.write(Paths.get(mergedManifest), (manifestContentWithoutEmptyLines.join("\n") + "\n").getBytes())

        // 提取 Forge、Fabric、Paper 文件夹内除了 META-INF/MANIFEST.MF 之外的其他内容
        copy {
            from(zipTree("HutoolCoreInPaper/build/libs/HutoolCoreInPaper-${version}.jar")) {
                exclude 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external")
        }
        copy {
            from(zipTree("HutoolCoreInForge/build/libs/HutoolCoreInForge-${version}.jar")) {
                exclude 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external")
        }
        copy {
            from(zipTree("HutoolCoreInFabric/build/libs/HutoolCoreInFabric-${version}.jar")) {
                exclude 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external")
        }
        copy {
            from(zipTree("HutoolCoreInIgnite/build/libs/HutoolCoreInIgnite-${version}.jar")) {
                exclude 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external")
        }
        copy {
            from(zipTree("HutoolCoreCommon/build/libs/HutoolCoreCommon-${version}.jar")) {
                exclude 'META-INF/MANIFEST.MF'
            }
            into("$buildDir/external")
        }
    }
}
shadowJar {
    dependsOn(mergeManifests)
    from("$buildDir/external")
    exclude("Paper/**")
    exclude("Forge/**")
    exclude("Fabric/**")
    exclude("Common/**")
    exclude("Ignite/**")
    manifest {
        from("$buildDir/external/META-INF/MANIFEST.MF")
    }
    dependencies {
        // 只打包 cn.hutool:hutool-all 依赖及其所有传递依赖
        include(dependency('cn.hutool:hutool-all'))
        include(dependency('com.google.zxing:core:3.3.3'))
        include(dependency('com.github.KenRouKoro:ctoml4j:1.0.1'))
        // 排除其他依赖
        exclude(dependency('org.junit.jupiter:junit-jupiter-api'))
        exclude(dependency('org.junit.jupiter:junit-jupiter-engine'))
    }
    archiveFileName.set("HutoolCore-${version}-Hutool-${hutool_version}-For-Forge-Fabric-Paper-Ignite.jar")
}




